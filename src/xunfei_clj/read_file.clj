;;用00000来分段,用1234来分句子
(defn r [text] (text-to-player text))

;; (macroexpand-1 '(read-do (r "中线是什么") (r "什么数学算法模型")) )
;; => "00000下面是:第1段 中线是什么11111本段结束 00000下面是:第2段 什么数学算法模型11111本段结束"
(defmacro read-do
  [& lst]
  (r
   (clojure.string/join
    " "
    (flatten
     (map-indexed
      (fn [inx# li#]
        (list
         (str "00000下面是:第" (+ inx# 1) "段")
         (str (last li#) "本段结束11111" ))) lst)))))

(read-do
 (r "000000中线是什么:
1.输入参数，对模型预测的结果影响很大，希拉里的投票预测，的哪家成功的公式 
2.李小龙咏春的: 山本岗夫的手脚的参数的极限就是和铁人对打所以抗击打能力特别强,底盘特别的稳,只能对付的地方是头和颈椎和脚面一些脆弱的地方
===>> 翻译演算成现实 ==> 变成每个活跃用户的极限 ==>> 群的极限是什么呢? 
3. 这里是向量化力学化: 让这些功夫中线,粘手合一,挨打能力等的标签点，就是聊天或者功夫运动轨迹，最后通过伯松过程 和 伽玛分布 ，找到聊天的列表或者是功夫突破对手的破解招式, 选中某几个标签点 ，组合模型，成n个主题，然后 生成聊天组合，，， 
000000下面设置两个开关来做多标签组合轨迹和单标签轨迹: 
1. 点击单个模式，直接找标签的上下文 
2. 多选模式，都条件搜索，某个上下文 bigbang的例子，选择一组聊天记录，生成分词，去掉顺序，去掉重复，得到 标签列表 ===>>> 这个过程的逆过程就是，用几个标签去伯松过程 ，分布生成整个聊天事件过程 
000000小大夫漫画可以做成gif图片 描述伯松过程 列表处理，驱动编程 文学驱动编程 编辑是文学，我是列表处理")

 (r "什么数学算法模型都是用Clojure来第一实现,什么平台都是先用Emacs第一实现: 
1. 在Emacs上使用讯飞语音识别,然后再推广到一切的平台上面, Emacs上来实现讯飞语音的自然语言处理和代码编辑合一, 每次C-xC-e的时候就是语音解释代码的执行方式
2. 写一个Emacs的宏,可以直接读代码的所有的注释,然后宏处理代码函数本身列表, 做分词去重复和过滤忽略的信息成标签云,然后泊松过程经过若干标签的组合, 根据语法树解析成对话体(就像图音树一样,将对话变成树,然后又树变成文章), 对话体变成文章,最终生成转换为自然语言 => 这就是代码Lisp表达式转为自然语言
3. 文学编程的最重要的是: 文学内容的lambda化高阶化,每一个句子就是一个lambda,然后lambda演算组合碰撞,生成最终的经验的山本岗夫的极限参数库
4. 可以做一个Emacs爬虫类的文章阅读器: 比如填入一篇微信的文章链接,或者填入某几个链接,然后就一篇一篇的把他们全部读出来
5. 把讯飞的Clojure库,封装成API,然后Emacs任意的地方都可以用
6. 一连串的函数的注释和代码图音树,都转换成个句子, 然后读完所有的句子了,就得到了文章
7. 和微信监听整合: 整合nodeWechat/wechat4u可以即时读取,某个群某个高手出现的对话 => 调用API读取微信重要即时对话
")
 
 )

